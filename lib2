-- UI Library with new style but same functionality
local UILibrary = {}

function UILibrary:CreateWindow(config)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Mobile"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Top Bar
    local topbar = Instance.new("Frame")
    topbar.Name = "topbar"
    topbar.Parent = ScreenGui
    topbar.BackgroundColor3 = Color3.new(0.14902, 0.14902, 0.14902)
    topbar.BorderSizePixel = 0
    topbar.Position = UDim2.new(0.3, 0, 0.2, 0)
    topbar.Size = UDim2.new(0.4, 0, 0.05, 0)
    topbar.Active = true
    topbar.Draggable = true

    local UICorner = Instance.new("UICorner")
    UICorner.Parent = topbar

    -- Title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = topbar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Size = UDim2.new(0.5, 0, 1, 0)
    Title.Font = Enum.Font.SourceSansBold
    Title.Text = config.Name or "UI Library"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left

    -- Decor Line
    local decorline = Instance.new("Frame")
    decorline.Name = "decorline"
    decorline.Parent = topbar
    decorline.BackgroundColor3 = Color3.new(0.415686, 0.415686, 0.415686)
    decorline.BorderSizePixel = 0
    decorline.Position = UDim2.new(0, 0, 0.85, 0)
    decorline.Size = UDim2.new(1, 0, 0.15, 0)

    -- Minimize Button
    local minimize = Instance.new("TextButton")
    minimize.Name = "minimize"
    minimize.Parent = topbar
    minimize.BackgroundTransparency = 1
    minimize.Position = UDim2.new(0.9, 0, 0, 0)
    minimize.Size = UDim2.new(0.1, 0, 0.55, 0)
    minimize.Font = Enum.Font.SourceSans
    minimize.Text = "-"
    minimize.TextColor3 = Color3.new(1, 1, 1)
    minimize.TextSize = 30
    minimize.TextWrapped = true

    -- Main Frame
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = topbar
    Main.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0, 0, 0.98, 0)
    Main.Size = UDim2.new(1, 0, 7.3, 0)
    Main.ClipsDescendants = true

    -- Tabs Container
    local tabs = Instance.new("Folder")
    tabs.Name = "tabs"
    tabs.Parent = Main

    -- Tab Buttons
    local tabbuttons = Instance.new("ScrollingFrame")
    tabbuttons.Name = "tabbuttons"
    tabbuttons.Parent = Main
    tabbuttons.Active = true
    tabbuttons.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
    tabbuttons.BorderSizePixel = 0
    tabbuttons.Position = UDim2.new(0.02, 0, 0.08, 0)
    tabbuttons.Size = UDim2.new(0.17, 0, 0.75, 0)
    tabbuttons.ScrollBarThickness = 5
    tabbuttons.CanvasSize = UDim2.new(0, 0, 0, 0)

    local UIListLayoutTabButtons = Instance.new("UIListLayout")
    UIListLayoutTabButtons.Parent = tabbuttons
    UIListLayoutTabButtons.Padding = UDim.new(0, 5)
    UIListLayoutTabButtons.HorizontalAlignment = Enum.HorizontalAlignment.Center

    local UIPaddingTabButtons = Instance.new("UIPadding")
    UIPaddingTabButtons.Parent = tabbuttons
    UIPaddingTabButtons.PaddingTop = UDim.new(0, 5)

    -- Minimize functionality
    local tweenservice = game:GetService("TweenService")
    local tweeninfo = TweenInfo.new(0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut)

    local function tweenwhich(m)
        if m == "open" then
            tweenservice:Create(Main, tweeninfo, {Size = UDim2.new(1, 0, 7.3, 0)}):Play()
        else
            tweenservice:Create(Main, tweeninfo, {Size = UDim2.new(1, 0, -0.13, 0)}):Play()
        end
    end

    local function whichway()
        if minimize.Text == "-" then
            minimize.Text = "+"
            minimize.Size = UDim2.new(0.1, 0, 0.85, 0)
            tweenwhich("close")
        else
            minimize.Text = "-"
            minimize.Size = UDim2.new(0.1, 0, 0.55, 0)
            tweenwhich("open")
        end
    end

    minimize.MouseButton1Click:Connect(whichway)

    local CurrentActiveTab = nil

    local function CreateTab(name)
        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name .. "TabButton"
        TabButton.Size = UDim2.new(0.9, 0, 0, 25)
        TabButton.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
        TabButton.Text = name
        TabButton.TextColor3 = Color3.new(1, 1, 1)
        TabButton.TextSize = 14
        TabButton.Parent = tabbuttons

        -- Update CanvasSize for tab buttons
        UIListLayoutTabButtons:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabbuttons.CanvasSize = UDim2.new(0, 0, 0, UIListLayoutTabButtons.AbsoluteContentSize.Y + 10)
        end)

        -- Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = name .. "TabContent"
        TabContent.Parent = tabs
        TabContent.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
        TabContent.BorderSizePixel = 0
        TabContent.Position = UDim2.new(0.22, 0, 0.07, 0)
        TabContent.Size = UDim2.new(0.76, 0, 0.76, 0)
        TabContent.Visible = false
        TabContent.ScrollBarThickness = 5
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)

        local ContentContainer = Instance.new("Frame")
        ContentContainer.Name = "ContentContainer"
        ContentContainer.Size = UDim2.new(1, 0, 1, 0)
        ContentContainer.BackgroundTransparency = 1
        ContentContainer.Parent = TabContent

        local UIListLayoutContent = Instance.new("UIListLayout")
        UIListLayoutContent.Name = "ContentListLayout"
        UIListLayoutContent.FillDirection = Enum.FillDirection.Vertical
        UIListLayoutContent.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayoutContent.Padding = UDim.new(0, 10)
        UIListLayoutContent.Parent = ContentContainer

        local UIPaddingContent = Instance.new("UIPadding")
        UIPaddingContent.PaddingTop = UDim.new(0, 10)
        UIPaddingContent.PaddingLeft = UDim.new(0, 10)
        UIPaddingContent.PaddingRight = UDim.new(0, 10)
        UIPaddingContent.Parent = ContentContainer

        -- Update CanvasSize for tab content
        UIListLayoutContent:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, UIListLayoutContent.AbsoluteContentSize.Y + 20)
        end)

        TabButton.MouseButton1Click:Connect(function()
            if CurrentActiveTab then
                CurrentActiveTab.Visible = false
                tabbuttons:FindFirstChild(CurrentActiveTab.Name:gsub("Content", "Button")).BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
            end
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
            CurrentActiveTab = TabContent
        end)

        -- Activate first tab
        if not CurrentActiveTab then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
            CurrentActiveTab = TabContent
        end

        -- Return the content container where elements should be parented
        return ContentContainer
    end

    local function CreateSlider(parent, config)
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(1, -20, 0, 60)
        Container.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
        Container.BorderSizePixel = 0
        Container.Parent = parent

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Text = config.Name .. ": " .. tostring(config.CurrentValue) .. (config.Suffix or "")
        Label.TextColor3 = Color3.new(1, 1, 1)
        Label.Font = Enum.Font.SourceSansSemibold
        Label.TextSize = 14
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Container

        local SliderFrame = Instance.new("Frame")
        SliderFrame.Size = UDim2.new(1, 0, 0, 15)
        SliderFrame.Position = UDim2.new(0, 0, 0, 30)
        SliderFrame.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
        SliderFrame.BorderSizePixel = 0
        SliderFrame.Parent = Container

        local SliderFill = Instance.new("Frame")
        SliderFill.Size = UDim2.new(
            (config.CurrentValue - config.Range[1]) / (config.Range[2] - config.Range[1]),
            0,
            1,
            0
        )
        SliderFill.BackgroundColor3 = Color3.new(0.415686, 0.415686, 0.415686)
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderFrame

        local function updateSlider(xPos)
            local normalizedX = math.clamp(xPos / SliderFrame.AbsoluteSize.X, 0, 1)
            local value = config.Range[1] + (config.Range[2] - config.Range[1]) * normalizedX
            value = math.floor(value / config.Increment) * config.Increment
            value = math.clamp(value, config.Range[1], config.Range[2])

            config.CurrentValue = value
            Label.Text = config.Name .. ": " .. tostring(math.floor(value * 10) / 10) .. (config.Suffix or "")
            SliderFill.Size = UDim2.new(
                (value - config.Range[1]) / (config.Range[2] - config.Range[1]),
                0,
                1,
                0
            )
            if config.Callback then
                config.Callback(value)
            end
        end

        SliderFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local mousePos = game:GetService("UserInputService"):GetMouseLocation()
                updateSlider(mousePos.X - SliderFrame.AbsolutePosition.X)
            end
        end)

        SliderFrame.InputChanged:Connect(function(input)
            if game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                local mousePos = game:GetService("UserInputService"):GetMouseLocation()
                updateSlider(mousePos.X - SliderFrame.AbsolutePosition.X)
            end
        end)
    end

    local function CreateToggle(parent, config)
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(1, -20, 0, 40)
        Container.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
        Container.BorderSizePixel = 0
        Container.Parent = parent

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(0.7, 0, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = config.Name
        Label.TextColor3 = Color3.new(1, 1, 1)
        Label.Font = Enum.Font.SourceSansSemibold
        Label.TextSize = 15
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Container

        local ToggleButton = Instance.new("TextButton")
        ToggleButton.Size = UDim2.new(0, 50, 0, 25)
        ToggleButton.Position = UDim2.new(1, -50, 0.5, -12.5)
        ToggleButton.BackgroundColor3 = config.CurrentValue and Color3.new(0, 0.5, 0) or Color3.new(0.5, 0, 0)
        ToggleButton.Text = config.CurrentValue and "ON" or "OFF"
        ToggleButton.TextColor3 = Color3.new(1, 1, 1)
        ToggleButton.Font = Enum.Font.SourceSansBold
        ToggleButton.TextSize = 13
        ToggleButton.Parent = Container

        ToggleButton.MouseButton1Click:Connect(function()
            config.CurrentValue = not config.CurrentValue
            ToggleButton.BackgroundColor3 = config.CurrentValue and Color3.new(0, 0.5, 0) or Color3.new(0.5, 0, 0)
            ToggleButton.Text = config.CurrentValue and "ON" or "OFF"
            if config.Callback then
                config.Callback(config.CurrentValue)
            end
        end)
    end

    local function CreateButton(parent, config)
        local Button = Instance.new("TextButton")
        Button.Size = UDim2.new(1, -20, 0, 40)
        Button.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
        Button.Text = config.Name
        Button.TextColor3 = Color3.new(1, 1, 1)
        Button.Font = Enum.Font.SourceSansBold
        Button.TextSize = 16
        Button.Parent = parent

        Button.MouseButton1Click:Connect(function()
            if config.Callback then
                config.Callback()
            end
        end)
    end

    local function CreateLabel(parent, text)
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -20, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Text = text
        Label.TextColor3 = Color3.new(0.8, 0.8, 0.8)
        Label.Font = Enum.Font.SourceSans
        Label.TextSize = 14
        Label.TextWrapped = true
        Label.Parent = parent
    end

    local function CreateInput(parent, config)
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(1, -20, 0, 65)
        Container.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
        Container.BorderSizePixel = 0
        Container.Parent = parent

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.Position = UDim2.new(0, 0, 0, 5)
        Label.BackgroundTransparency = 1
        Label.Text = config.Name
        Label.TextColor3 = Color3.new(1, 1, 1)
        Label.Font = Enum.Font.SourceSansSemibold
        Label.TextSize = 14
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Container

        local TextBox = Instance.new("TextBox")
        TextBox.Size = UDim2.new(1, 0, 0, 28)
        TextBox.Position = UDim2.new(0, 0, 0, 30)
        TextBox.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
        TextBox.TextColor3 = Color3.new(1, 1, 1)
        TextBox.Font = Enum.Font.SourceSans
        TextBox.TextSize = 14
        TextBox.PlaceholderText = config.PlaceholderText or ""
        TextBox.ClearTextOnFocus = false
        TextBox.Parent = Container

        TextBox.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                if config.Callback then
                    config.Callback(TextBox.Text)
                end
            end
        end)
    end

    local function CreateDropdown(parent, config)
        local Container = Instance.new("Frame")
        Container.Size = UDim2.new(1, -20, 0, 40)
        Container.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
        Container.BorderSizePixel = 0
        Container.Parent = parent

        local DropdownButton = Instance.new("TextButton")
        DropdownButton.Size = UDim2.new(1, 0, 1, 0)
        DropdownButton.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
        DropdownButton.Text = (config.CurrentOption and config.CurrentOption[1]) or "Select Option"
        DropdownButton.TextColor3 = Color3.new(1, 1, 1)
        DropdownButton.Font = Enum.Font.SourceSansBold
        DropdownButton.TextSize = 14
        DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
        DropdownButton.TextWrapped = true
        DropdownButton.Parent = Container

        local OptionsFrame = Instance.new("Frame")
        OptionsFrame.Name = "OptionsFrame"
        OptionsFrame.Size = UDim2.new(1, 0, 0, 0)
        OptionsFrame.Position = UDim2.new(0, 0, 1, 5)
        OptionsFrame.BackgroundColor3 = Color3.new(0.133333, 0.133333, 0.133333)
        OptionsFrame.BorderSizePixel = 0
        OptionsFrame.Visible = false
        OptionsFrame.ZIndex = 2
        OptionsFrame.Parent = Container

        local OptionsListLayout = Instance.new("UIListLayout")
        OptionsListLayout.FillDirection = Enum.FillDirection.Vertical
        OptionsListLayout.Padding = UDim.new(0, 2)
        OptionsListLayout.Parent = OptionsFrame

        local CurrentSelectedOptions = {}
        if config.CurrentOption then
            CurrentSelectedOptions = table.clone(config.CurrentOption)
        end

        local function updateButtonText()
            if #CurrentSelectedOptions > 0 then
                DropdownButton.Text = table.concat(CurrentSelectedOptions, ", ")
            else
                DropdownButton.Text = "Select Option"
            end
        end

        for _, option in ipairs(config.Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 25)
            OptionButton.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
            OptionButton.Text = option
            OptionButton.TextColor3 = Color3.new(1, 1, 1)
            OptionButton.Font = Enum.Font.SourceSans
            OptionButton.TextSize = 14
            OptionButton.TextXAlignment = Enum.TextXAlignment.Left
            OptionButton.Parent = OptionsFrame

            if table.find(CurrentSelectedOptions, option) then
                OptionButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
            end

            OptionButton.MouseButton1Click:Connect(function()
                if config.MultipleOptions then
                    local index = table.find(CurrentSelectedOptions, option)
                    if index then
                        table.remove(CurrentSelectedOptions, index)
                        OptionButton.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
                    else
                        table.insert(CurrentSelectedOptions, option)
                        OptionButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
                    end
                else
                    CurrentSelectedOptions = { option }
                    for _, btn in ipairs(OptionsFrame:GetChildren()) do
                        if btn:IsA("TextButton") then
                            btn.BackgroundColor3 = Color3.new(0.152941, 0.152941, 0.152941)
                        end
                    end
                    OptionButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
                    OptionsFrame.Visible = false
                end
                updateButtonText()
                if config.Callback then
                    config.Callback(CurrentSelectedOptions)
                end
            end)
        end

        OptionsFrame.Size = UDim2.new(1, 0, 0, #config.Options * 27)

        DropdownButton.MouseButton1Click:Connect(function()
            OptionsFrame.Visible = not OptionsFrame.Visible
        end)

        game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
            if
                input.UserInputType == Enum.UserInputType.MouseButton1 and
                not gameProcessed and
                OptionsFrame.Visible and
                not input.Target:IsDescendantOf(OptionsFrame) and
                not input.Target:IsDescendantOf(DropdownButton)
            then
                OptionsFrame.Visible = false
            end
        end)
    end

    return {
        ScreenGui = ScreenGui,
        CreateTab = CreateTab,
        CreateSlider = CreateSlider,
        CreateToggle = CreateToggle,
        CreateButton = CreateButton,
        CreateLabel = CreateLabel,
        CreateInput = CreateInput,
        CreateDropdown = CreateDropdown
    }
end

return UILibrary
